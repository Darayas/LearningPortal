// <auto-generated />
using System;
using LearningPortal.Infrastructure.EFCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningPortal.Infrastructure.EFCore.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20221119070803_mig5")]
    partial class mig5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LearningPortal.Domain.FileServers.FileAgg.Entity.tblFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileMetaData")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("FilePathId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SizeOnDisk")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FilePathId");

                    b.HasIndex("UserId");

                    b.ToTable("tblFiles");
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.FilePathAgg.Entity.tblFilePaths", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileServerId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("FileServerId");

                    b.ToTable("tblFilePaths");
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.ServerAgg.Entity.tblFileServers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FtpData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpDomin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HttpPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("tblFileServers");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CitryAgg.Entity.tblCities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ProvinceId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblCities");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CitryAgg.Entity.tblCityTranslates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LangId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("LangId");

                    b.ToTable("tblCityTranslates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlagImgId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FlagImgId");

                    b.ToTable("tblCountry");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountryTranslates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LangId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LangId");

                    b.ToTable("tblCountryTranslates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.LanguageAgg.Entities.tblLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("UseForSiteLanguage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tblLanguage");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinces", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("tblProvinces");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinceTranslates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LangId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProvinceId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblProvinceTranslates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Settings.NotificationTemplateAgg.Entities.tblNotificationTemplates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LangId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.ToTable("tblNotificationTemplates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.AccessLevelAgg.Entities.tblAccessLevelRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessLevelId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblAccessLevelRoles");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.AccessLevelAgg.Entities.tblAccessLevels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tblAccessLevels");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.AddressAgg.Entity.tblAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CityId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProvinceId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("tblAddress");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.RoleAgg.Entities.tblUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccessLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTryToSendSms")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfileImgId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsHashCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileImgId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.FileAgg.Entity.tblFiles", b =>
                {
                    b.HasOne("LearningPortal.Domain.FileServers.FilePathAgg.Entity.tblFilePaths", "tblFilePaths")
                        .WithMany("tblFiles")
                        .HasForeignKey("FilePathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", "tblUsers")
                        .WithMany("tblFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("tblFilePaths");

                    b.Navigation("tblUsers");
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.FilePathAgg.Entity.tblFilePaths", b =>
                {
                    b.HasOne("LearningPortal.Domain.FileServers.ServerAgg.Entity.tblFileServers", "tblFileServer")
                        .WithMany("tblFilePaths")
                        .HasForeignKey("FileServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblFileServer");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CitryAgg.Entity.tblCities", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinces", "tblProvinces")
                        .WithMany("tblCities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblProvinces");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CitryAgg.Entity.tblCityTranslates", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.CitryAgg.Entity.tblCities", "tblCities")
                        .WithMany("tblCityTranslates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Region.LanguageAgg.Entities.tblLanguage", "tblLanguage")
                        .WithMany("tblCityTranslates")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblCities");

                    b.Navigation("tblLanguage");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountry", b =>
                {
                    b.HasOne("LearningPortal.Domain.FileServers.FileAgg.Entity.tblFiles", "tblFiles")
                        .WithMany("tblCountry")
                        .HasForeignKey("FlagImgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblFiles");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountryTranslates", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.LanguageAgg.Entities.tblLanguage", "tblLanguage")
                        .WithMany("tblCountryTranslates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountry", "tblCountry")
                        .WithMany("tblCountryTranslates")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblCountry");

                    b.Navigation("tblLanguage");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinces", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountry", "tblCountry")
                        .WithMany("tblProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblCountry");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinceTranslates", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.LanguageAgg.Entities.tblLanguage", "tblLanguage")
                        .WithMany("tblProvinceTranslates")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinces", "tblProvinces")
                        .WithMany("tblProvinceTranslates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblLanguage");

                    b.Navigation("tblProvinces");
                });

            modelBuilder.Entity("LearningPortal.Domain.Settings.NotificationTemplateAgg.Entities.tblNotificationTemplates", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.LanguageAgg.Entities.tblLanguage", "tblLanguage")
                        .WithMany("tblNotificationTemplates")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblLanguage");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.AccessLevelAgg.Entities.tblAccessLevelRoles", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.AccessLevelAgg.Entities.tblAccessLevels", "tblAccessLevels")
                        .WithMany("tblAccessLevelRoles")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", "tblRoles")
                        .WithMany("tblAccessLevelRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblAccessLevels");

                    b.Navigation("tblRoles");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.AddressAgg.Entity.tblAddress", b =>
                {
                    b.HasOne("LearningPortal.Domain.Region.CitryAgg.Entity.tblCities", "tblCities")
                        .WithMany("tblAddress")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountry", "tblCountry")
                        .WithMany("tblAddress")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinces", "tblProvinces")
                        .WithMany("tblAddress")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", "tblUsers")
                        .WithMany("tblAddress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblCities");

                    b.Navigation("tblCountry");

                    b.Navigation("tblProvinces");

                    b.Navigation("tblUsers");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", "tblRole_Parent")
                        .WithMany("tblRole_Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("tblRole_Parent");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.RoleAgg.Entities.tblUserRoles", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", "tblRoles")
                        .WithMany("tblUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", "tblUsers")
                        .WithMany("tblUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblRoles");

                    b.Navigation("tblUsers");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.AccessLevelAgg.Entities.tblAccessLevels", "tblAccessLevels")
                        .WithMany("tblUsers")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningPortal.Domain.FileServers.FileAgg.Entity.tblFiles", "tblProfileImg")
                        .WithMany("tblUserImg")
                        .HasForeignKey("ProfileImgId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("tblAccessLevels");

                    b.Navigation("tblProfileImg");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.FileAgg.Entity.tblFiles", b =>
                {
                    b.Navigation("tblCountry");

                    b.Navigation("tblUserImg");
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.FilePathAgg.Entity.tblFilePaths", b =>
                {
                    b.Navigation("tblFiles");
                });

            modelBuilder.Entity("LearningPortal.Domain.FileServers.ServerAgg.Entity.tblFileServers", b =>
                {
                    b.Navigation("tblFilePaths");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CitryAgg.Entity.tblCities", b =>
                {
                    b.Navigation("tblAddress");

                    b.Navigation("tblCityTranslates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.CountryAgg.Entity.tblCountry", b =>
                {
                    b.Navigation("tblAddress");

                    b.Navigation("tblCountryTranslates");

                    b.Navigation("tblProvinces");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.LanguageAgg.Entities.tblLanguage", b =>
                {
                    b.Navigation("tblCityTranslates");

                    b.Navigation("tblCountryTranslates");

                    b.Navigation("tblNotificationTemplates");

                    b.Navigation("tblProvinceTranslates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Region.ProvinceAgg.Entity.tblProvinces", b =>
                {
                    b.Navigation("tblAddress");

                    b.Navigation("tblCities");

                    b.Navigation("tblProvinceTranslates");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.AccessLevelAgg.Entities.tblAccessLevels", b =>
                {
                    b.Navigation("tblAccessLevelRoles");

                    b.Navigation("tblUsers");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.RoleAgg.Entities.tblRoles", b =>
                {
                    b.Navigation("tblAccessLevelRoles");

                    b.Navigation("tblRole_Childs");

                    b.Navigation("tblUserRoles");
                });

            modelBuilder.Entity("LearningPortal.Domain.Users.UserAgg.Entities.tblUsers", b =>
                {
                    b.Navigation("tblAddress");

                    b.Navigation("tblFiles");

                    b.Navigation("tblUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
